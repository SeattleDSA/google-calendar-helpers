#!/usr/bin/env python3

import os

# Go to https://console.developers.google.com to generate this. You
# need to enable it for the Google Calendar API
API_KEY='Insert-Your-API-key-here'


# Oops. Now we need keys for other APIs, too. 
# This is for the Twitter API. Generate it from developers.twitter.com
# You only need it if you are sending tweets from the calendar
TWITTER_CONSUMER_KEY='Insert-Your-Consumer-Key'
TWITTER_CONSUMER_SECRET='Insert-Your-Consumer-Secret'

TWITTER_ACCESS_TOKEN='Insert-Your-Twitter-Access-Token'
TWITTER_ACCESS_SECRET='Insert-Your-Twitter-Access-Token-Secret'


# Look in your calendar URLs to figure this out (src= parameter). 
#
# This is a list. The first calendar has the master information 
# (such as calendar title and description). Subsequent calendars 
# contribute only events.
CALENDAR_IDS=[
    "nlkc39jt4p0nbc4pk9pj7p5fh0@group.calendar.google.com",
    ]

# How many items should be in the feed? For a busy calendar you want
# this at least 50 (and maybe more). 
NUM_ITEMS='100'

# How many days of events should displayed in the newsletter?
# The NUM_ITEMS setting takes precedence. Use "None" for no limit or a
# positive integer for days. For events only occurring today, use 1.
# eg NEWSLETTER_MAX_DAYS=14
#
# (No, this is not a good idea for RSS feeds. Trust me.)
NEWSLETTER_MAX_DAYS=None

# What link shortening service should be used in newsletters?
# If you have no preference then the default should be okay. 
# If you want to turn off link shortening set: 
# LINK_SHORTENER_PARAMS = None
# 
# See https://github.com/ellisonleao/pyshorteners/ for the 
# syntax of making a new shortener. For example, to 
# use bit.ly, you would specify YOUR_TOKEN, then have: 
# LINK_SHORTENER_PARAMS = {"engine":"Bitly", "bitly_token":YOUR_TOKEN}
#
LINK_SHORTENER_PARAMS = {"engine":"Dagd"}

# For datetime nonsense 
TIMEZONE='America/Toronto'

# Used as the link field in the RSS feed
WEBSITE='http://watcamp.com'

# Used as the location of this feed
FEED_LINK="{}/watcamp.rss".format(WEBSITE)

# Used as the image for the RSS feed
LOGO="{}/img/logo.png".format(WEBSITE)

# A short description for the RSS feed
DESCRIPTION='Upcoming tech events in Waterloo Region'

# Where to save the output, and what to call it
PARENTDIR=os.path.abspath(os.pardir)
OUTRSS=os.path.join(PARENTDIR, "output", "watcamp.rss")
OUTNEWS=os.path.join(PARENTDIR, "output", "watcamp.txt")
OUTJSON=os.path.join(PARENTDIR, "output", "watcamp.json")
OUTSIDEBAR=os.path.join(PARENTDIR, "output", "watcamp-sidebar.html")

# Who is responsible for this feed
WEBMASTER="admin@example.com"
WEBMASTER_NAME="Webmaster"

# Introductory text for newsletter
NEWSLETTER_HEADER="""
Welcome to the watcamp.com newsletter. To contribute events to the calendar, use the Contact functionality on the website. To unsubscribe, reply to this message with the subject "unsubscribe", or visit the mailing list website.

Note that "Learn More" links point to our Google Calendar, not to the event sites directly (but those event sites are usually accessible from our calendar).

"""


# How many days in advance should we tweet events, and what should the
# intro text be?
TWEET_DATE_EXPRESSION = { 
  0: "Today!",
  1: "Tomorrow!",
  2: "Three sleeps!",
  3: "Four sleeps!",
  4: "Five sleeps!",
  6: "Next week!"
  }

# How many days in advance should we grab tweets (upper bound). 
# Use 8 for events one week from now. 0 is today.
TWEET_NUM_DAYS=8

# What hours of the day should we release tweets? This should be a
# single range (sorry) with two strings specified in 24 hour notation.
# The last minute will NOT be included.
# 
# The start should be AFTER you run the script (actually, after the 
# script stops running). This is going to be bad for events that begin 
# today, before the tweet window.
TWEET_WINDOW = ("09:00", "16:00")

# Where should tweets to be released be stored?
# DANGER: this folder should be writable and readable by the process.
OUTTWEET=os.path.join(PARENTDIR, "output", "tweets")

# Where to find the google-calendar-helpers files
PYDIR=os.getcwd()

# Where to find shell script that launches tweets
SHELL_SCRIPT_DIR=os.path.join(PYDIR, 'scripts')

# Where to find the virtualenv environment
VENV_DIR=os.path.join(PYDIR, 'venv')
